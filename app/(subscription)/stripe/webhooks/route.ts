// app/(subscription)/stripe/webhooks/route.ts

import Stripe from 'stripe';
import { stripe } from '@/lib/stripe/config';
import {updateUserSubscription} from "@/lib/db/queries";

const relevantEvents = new Set([
    'customer.subscription.created',
    'customer.subscription.updated',
    'customer.subscription.deleted',
    'checkout.session.completed',
]);

export async function POST(req: Request) {
    const body = await req.text();
    const sig = req.headers.get('stripe-signature') as string;
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    let event: Stripe.Event;

    try {
        if (!sig || !webhookSecret) {
            return new Response('Webhook secret not found.', { status: 400 });
        }
        event = stripe.webhooks.constructEvent(body, sig, webhookSecret);
        console.log(`üîî  Webhook received: ${event.type}`);
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("Stripe event data:", JSON.stringify(event, null, 2));
    } catch (err: any) {
        console.error(`‚ùå Error message: ${err.message}`);
        return new Response(`Webhook Error: ${err.message}`, { status: 400 });
    }

    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if (!relevantEvents.has(event.type)) {
        console.log(`Ignoring event type: ${event.type}`);
        return new Response(JSON.stringify({ received: true }), { status: 200 });
    }

    try {
        switch (event.type) {
            case 'customer.subscription.created':
            case 'customer.subscription.updated':
            case 'customer.subscription.deleted': {
                const stripeSubscription = event.data.object as Stripe.Subscription;
                const userId = stripeSubscription.metadata?.userId;
                if (!userId) {
                    throw new Error('UserId not found in subscription metadata.');
                }
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ: –µ—Å–ª–∏ product —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–∞—Ä–∏—Ñ–æ–º pro, —Ç–æ plan = 'pro'
                const productId = stripeSubscription.items.data[0].price.product as string;
                let plan: 'free' | 'pro' = 'free';
                if (productId === process.env.STRIPE_PRODUCT_PRO) {
                    plan = 'pro';
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è customerId –∏ provider = 'stripe'
                await updateUserSubscription(
                    userId,
                    stripeSubscription.id,
                    plan,
                    stripeSubscription.status as 'active' | 'past_due' | 'canceled' | 'incomplete',
                    stripeSubscription.customer as string,
                    'stripe'
                );
                console.log(`Updated subscription for user ${userId} with subscriptionId ${stripeSubscription.id}`);
                break;
            }
            case 'checkout.session.completed': {
                const checkoutSession = event.data.object as Stripe.Checkout.Session;
                if (checkoutSession.mode === 'subscription' && checkoutSession.subscription) {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ ID, –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –≤ —Å–µ—Å—Å–∏–∏
                    const stripeSubscription = await stripe.subscriptions.retrieve(
                        checkoutSession.subscription as string
                    );
                    const userId = stripeSubscription.metadata?.userId;
                    if (!userId) {
                        throw new Error('UserId not found in subscription metadata.');
                    }
                    const productId = stripeSubscription.items.data[0].price.product as string;
                    let plan: 'free' | 'pro' = 'free';
                    if (productId === process.env.STRIPE_PRODUCT_PRO) {
                        plan = 'pro';
                    }
                    await updateUserSubscription(
                        userId,
                        stripeSubscription.id,
                        plan,
                        stripeSubscription.status as 'active' | 'past_due' | 'canceled' | 'incomplete',
                        stripeSubscription.customer as string,
                        'stripe'
                    );
                    console.log(`Checkout session completed. Updated subscription for user ${userId} with subscriptionId ${stripeSubscription.id}`);
                }
                break;
            }
            default:
                console.log(`Unhandled event type: ${event.type}`);
        }
    } catch (error) {
        console.error(error);
        // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Stripe –Ω–µ –¥–µ–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return new Response('Webhook handler failed. Check logs.', { status: 200 });
    }

    return new Response(JSON.stringify({ received: true }), { status: 200 });
}
